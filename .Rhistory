library(ggplot2)
library(zoo)
try(URL <- "http://info.worldbank.org/governance/wgi/index.aspx?fileName=wgidataset.xlsx", silent = TRUE)
fname <- "worldbank_wgidataset.xlsx"
if (!(file.exists(fname))) {
fname <- tempfile()
download.file(URL, fname, mode='wb')
}
ccraw <- read.xlsx2(fname, 7, sheetName = NULL, startRow = 14, endRow = 230, colIndex = NULL, as.data.frame = TRUE, header = FALSE)
# We create a new data frame containing only the data we are interested in. The new object keeps only
# the control of corruption estimate.
cc <- ccraw[c(2, 1, 3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87, 93)]
names(cc) = as.character(unlist(cc[1,]))
cc = cc[-1,]
row.names(cc) <- NULL
colnames(cc)[1] <- "wbcode"
colnames(cc)[2] <- "country"
cc <- gather(cc, Year, Estimate, 3:18)
cc <- cc[order(cc$country, cc$year), ]
row.names(cc) <- NULL
c <- mutate(cc, ID = rownames(cc))
cc <- cc[c(5,1,2,3,4)]
cc$iso2c <- countrycode(cc$wbcode, origin = "wb",destination = "iso2c", warn = TRUE)
cc$country <- countrycode(cc$iso2c, origin = "iso2c",destination = "country.name", warn = TRUE)
cc <- cc[c(1,6,2,3,4,5)]
cc <- cc[-c(3)]
colnames(cc)[1] <- "id"
colnames(cc)[4] <- "year"
colnames(cc)[5] <- "estimate"
egate all WDI downloaded indicators into a single data frame for easier merge with corruption data.
wdi <- merge(trade, gdppc,by=c("iso2c","year","country"), all = TRUE)
wdi <- merge(wdi, education,by=c("iso2c","year","country"), all = TRUE)
wdi <- merge(wdi, competitiveness,by=c("iso2c","year","country"), all = TRUE)
wdi <- merge(wdi, urban,by=c("iso2c","ye
getwd()
try(setwd("~/Documents/Assignment1/"), silent = TRUE)
getwd()
try(setwd("~/Documents/Assignment1/"), silent = TRUE)
library(httr)
library(plyr)
library(xlsx)
library(rio)
library(stargazer)
library(Zelig)
library(repmis)
library(plm)
library(tidyr)
library(countrycode)
library(dplyr)
library(Hmisc)
library(WDI)
library(xlsxjars)
library(rJava)
library(ggplot2)
library(zoo)
library(httr)
library(plyr)
library(xlsx)
library(rio)
library(stargazer)
library(Zelig)
library(repmis)
library(plm)
library(tidyr)
library(countrycode)
library(dplyr)
library(Hmisc)
library(WDI)
library(rJava)
library(xlsxjars)
library(ggplot2)
library(zoo)
try(URL <- "http://info.worldbank.org/governance/wgi/index.aspx?fileName=wgidataset.xlsx", silent = TRUE)
fname <- "worldbank_wgidataset.xlsx"
if (!(file.exists(fname))) {
fname <- tempfile()
download.file(URL, fname, mode='wb')
}
ccraw <- read.xlsx2(fname, 7, sheetName = NULL, startRow = 14, endRow = 230, colIndex = NULL, as.data.frame = TRUE, header = FALSE)
cc <- ccraw[c(2, 1, 3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87, 93)]
names(cc) = as.character(unlist(cc[1,]))
cc = cc[-1,]
row.names(cc) <- NULL
colnames(cc)[1] <- "wbcode"
colnames(cc)[2] <- "country"
library(httr)
library(plyr)
library(xlsx)
library(rio)
library(stargazer)
library(Zelig)
library(repmis)
library(plm)
library(tidyr)
library(countrycode)
library(dplyr)
library(Hmisc)
library(WDI)
library(rJava)
library(xlsxjars)
library(ggplot2)
library(zoo)
#####################################
# Corruption and Accountability Mechanisms -
# by Roberto Mart??nez B. Kukutschka and Mariam Sanjush
# Due date: 19.04.2016
#####################################
# 1. Set working directory for our two computers (so that the code runs on either of them)
getwd()
getwd()
library(httr)
library(plyr)
library(xlsx)
library(rio)
library(stargazer)
library(Zelig)
library(repmis)
library(plm)
library(tidyr)
library(countrycode)
library(dplyr)
library(Hmisc)
library(WDI)
library(xlsxjars)
library(ggplot2)
library(zoo)
library(httr)
library(plyr)
library(xlsx)
library(rio)
library(stargazer)
library(Zelig)
library(repmis)
library(plm)
library(tidyr)
library(countrycode)
library(dplyr)
library(Hmisc)
library(WDI)
library(xlsxjars)
library(ggplot2)
library(zoo)
#####################################
# SECTION I: COLLLECTING DATA
#####################################
#STEP 1: Download data for Dependent Variable: Corruption
#Given that out research question treats corruption as the dependent variable, we first need an indicator of
#the extent of corruption in a country. Given its availability and comparability across time, we decided to use
#the Control of Corruption estimate from the Worldwide Governance Indicators Database. Control of Corruption (CoC)
#captures perceptions of the extent to which public power is exercised for private gain, including both petty and
#grand forms of corruption, as well as "capture" of the state by elites and private interests.
# The first step is to obtain the data from the website:
try(URL <- "http://info.worldbank.org/governance/wgi/index.aspx?fileName=wgidataset.xlsx", silent = TRUE)
fname <- "worldbank_wgidataset.xlsx"
if (!(file.exists(fname))) {
fname <- tempfile()
download.file(URL, fname, mode='wb')
}
ccraw <- read.xlsx2(fname, 7, sheetName = NULL, startRow = 14, endRow = 230, colIndex = NULL, as.data.frame = TRUE, header = FALSE)
# We create a new data frame containing only the data we are interested in. The new object keeps only
# the control of corruption estimate.
cc <- ccraw[c(2, 1, 3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87, 93)]
# Set the years as an observation
names(cc) = as.character(unlist(cc[1,]))
cc = cc[-1,]
row.names(cc) <- NULL
colnames(cc)[1] <- "wbcode"
colnames(cc)[2] <- "country"
# Ordering the data
cc <- gather(cc, Year, Estimate, 3:18)
cc <- cc[order(cc$country, cc$year), ]
row.names(cc) <- NULL
# Create ID for each observation and matching country codes
cc <- mutate(cc, ID = rownames(cc))
cc <- cc[c(5,1,2,3,4)]
cc$iso2c <- countrycode(cc$wbcode, origin = "wb",destination = "iso2c", warn = TRUE)
cc$country <- countrycode(cc$iso2c, origin = "iso2c",destination = "country.name", warn = TRUE)
cc <- cc[c(1,6,2,3,4,5)]
cc <- cc[-c(3)]
colnames(cc)[1] <- "id"
colnames(cc)[4] <- "year"
colnames(cc)[5] <- "estimate"
#STEP 2: Download data for independent variables
#Having downloaded the required data for our dependent variable, we proceed to download additional
#variables that will be necessary for our analysis from the World Development Indicators Database.
#TRADE: the sum of exports and imports of goods and services measured as a share of gross domestic product.
trade <- WDI(indicator = 'NE.TRD.GNFS.ZS', start= 1996, end = 2014)
#EDUCATION: Gross enrollment ratio is the ratio of total enrollment, regardless of age, to the population of the age group that officially corresponds to the level
#of education shown. Secondary education completes the provision of basic education that began at the primary level, and aims at laying the foundations
#for lifelong learning and human development, by offering more subject- or skill-oriented instruction using more specialized teachers.
education <- WDI(indicator='SE.SEC.ENRR', start= 1996, end= 2014)
#COMPETITIVENESS: The data covering taxes payable by businesses, measure all taxes and contributions that are government mandated (at any level - federal,
#state, or local), apply to standardized businesses, and have an impact in their income statements. The taxes covered go beyond the definition of
#a tax for government national accounts (compulsory, unrequited payments to general government) and also measure any imposts that affect business accounts.
#The main differences are in labor contributions and value added taxes. The data account for government-mandated contributions paid by the employer to a
#requited private pension fund or workers insurance fund but exclude value added taxes because they do not affect the accounting profits of the business
#- that is, they are not reflected in the income statement.
competitiveness <- WDI(indicator='IC.TAX.DURS', start=1996, end=2014)
#URBAN POPULATION: refers to people living in urban areas as defined by national statistical offices. It is calculated using World Bank
#population estimates and urban ratios from the United Nations World Urbanization Prospects.
urban <- WDI(indicator='SP.URB.TOTL.IN.ZS', start=1996, end=2014)
#GDP PER CAPITA (PPP): is gross domestic product converted to international dollars using purchasing power parity rates. An international dollar has
#the same purchasing power over GDP as the U.S. dollar has in the United States. GDP is the sum of gross value added by all resident
#producers in the economy plus any product taxes and minus any subsidies not included in the value of the products. It is calculated
#without making deductions for depreciation of fabricated assets or for depletion and degradation of natural resources. Data are in
#constant 2011 international dollars.
gdppc <- WDI(indicator = 'NY.GDP.MKTP.PP.KD', start= 1996, end = 2014)
# Aggregate all WDI downloaded indicators into a single data frame for easier merge with corruption data.
wdi <- merge(trade, gdppc,by=c("iso2c","year","country"), all = TRUE)
wdi <- merge(wdi, education,by=c("iso2c","year","country"), all = TRUE)
wdi <- merge(wdi, competitiveness,by=c("iso2c","year","country"), all = TRUE)
wdi <- merge(wdi, urban,by=c("iso2c","year","country"), all = TRUE)
# Inserting ISO2C codes to the WDI data in order to allow merge with corruption data.
wdi$country <- countrycode(wdi$iso2c, origin = "iso2c",destination = "country.name", warn = TRUE)
# STEP 3: Create and aggregated database
finaldata <- merge(wdi,cc,by=c("iso2c","year", "country"), all = TRUE)
# Rename variables for easier identification
finaldata <- rename  (finaldata,
trade = NE.TRD.GNFS.ZS,
education = SE.SEC.ENRR,
competitiveness = IC.TAX.DURS,
gdppc = NY.GDP.MKTP.PP.KD,
urban = SP.URB.TOTL.IN.ZS,
cocscore = estimate,
country = country
)
# Create a csv file with the final version of the data
write.csv(finaldata, file="WGI_WDI_data.csv")
# cocscore is character and includes "ERROR" and "Estimate" strings, must be numeric
finaldata[,"cocscore"] <- as.numeric(gsub("ERROR|Estimate", "", finaldata[,"cocscore"]))
# subset EU28 countries
euro.states <- c("AT","BE","BG","HR",
"CY","DK","EE",
"FI","FR","DE",
"GR","HU","MT",
"IE","IT",
"LV","LT","LU",
"NL","CZ",
"PL","PT","RO",
"SK", "SI",
"ES","SE","GB")
# subset EU28 countries from whole sample
euro <- finaldata[which(finaldata$iso2c %in% euro.states),]
View(finaldata)
# generate first line plot for EU28 for 2002-2014
plot = ggplot(euro[euro$year>=2002,]) # generate ggplot with data = EU28 starting in 2002
plot = plot + geom_line(aes(x = year, y = cocscore, group = factor(country), # add layer to plot
color = factor(country))) # layer = line plot over year for cocscore
# group and color separate lines for each country
plot # prints the plot
# sorted list with cocscores in 2002
tmp <- (euro[euro$year==2002,c("country","cocscore")])
tmp[order(-tmp[,2]),]
# descriptives for EU28 countries
require(stargazer)
stargazer(euro)
| Country         | Nominal    | Country identifier                                      |
| Country         | Nominal    | Country identifier                                      |
euro.states2 <- c("AUT","BEL","BGR","HRV",
"CYP","DNK","EST",
"FIN","FRA","DEU",
"GRC","HUN","MT",
"IRL","ITA",
"LVA","LTU","LUX",
"NLD","CZE",
"POL","PRT","ROM",
"SVK", "SVN",
"ESP","SWE","GBR")
install.packages("xlsx")
install.packages("xlsx")
tmp <- read.xlsx("AntiCorruptionData.xslx")
require(xslx)
require(xslx)
require(xlsx)
tmp <- read.xlsx("AntiCorruptionData.xlsx")
tmp <- read.xlsx("AntiCorruptionData.xlsx",  sheetName = "Freedom of Information")
getwd()
setwd("/Users/mariamsanjush/Desktop/MPP-4th Semester/MPP-E1180 Introduction to Collaborative Social Science Data Analysis/Assignments")
tmp <- read.xlsx("AntiCorruptionData.xlsx",  sheetName = "Freedom of Information")
getwd()
setwd("/Users/mariamsanjush/Desktop/MPP-4th Semester/MPP-E1180 Introduction to Collaborative Social Science Data Analysis/Assignments/Assignment3")
tmp <- read.xlsx("AntiCorruptionData.xlsx",  sheetName = "Freedom of Information")
head(tmp)
euro.id <- cbind(euro.state, euro.state2)
euro.id <- cbind(euro.states, euro.states2)
euro.id
names(euro)
euro.id <- cbind(iso2c = euro.states, ifs = euro.states2)
merge(euro, euro.id, by = iso2c, all = TRUE)
euro.id <- cbind(iso2c = euro.states, ifs = euro.states2)
names(euro)
merge(euro, euro.id, by = iso2c, all = TRUE)
merge(euro, euro.id, by = "iso2c", all = TRUE)
euro.states2 <- c("AUT","BEL","BGR","HRV",
"CYP","DNK","EST",
"FIN","FRA","DEU",
"GRC","HUN","MLT",
"IRL","ITA",
"LVA","LTU","LUX",
"NLD","CZE",
"POL","PRT","ROM",
"SVK", "SVN",
"ESP","SWE","GBR")
merge(euro, euro.id, by = "iso2c", all = TRUE)
euro.id <- cbind(iso2c = euro.states, ifs = euro.states2)
merge(euro, euro.id, by = "iso2c", all = TRUE)
euro <- merge(euro, euro.id, by = "iso2c", all = TRUE)
tmp2 <- read.xlsx("AntiCorruptionData.xlsx",  sheetName = "Anti-Corruption Agency")
names(tmp2)
merge(euro, tmp1, by = c("ifs", "year"), all = TRUE)
tmp1 <- read.xlsx("AntiCorruptionData.xlsx",  sheetName = "Freedom of Information")
merge(euro, tmp1, by = c("ifs", "year"), all = TRUE)
names(euro)
names(tmp1)
colnames(tmp1)[4] <- "year"
merge(euro, tmp1, by = c("ifs", "year"), all = TRUE)
tmp <- merge(euro, tmp1, by = c("ifs", "year"), all = TRUE)
View(tmp)
finaldata[which(finaldata$iso2c %in% euro.states),]
euro <- finaldata[which(finaldata$iso2c %in% euro.states),]
euro
unique(euro$year)
euro$foia[euro$country == "Ireland" & euro$year == "1998"] <- 1
euro$foia <- 0
euro$foia[euro$country == "Ireland" & euro$year == "1998"] <- 1
View(euro)
unique(euro$country)
euro$foia[euro$country == "Ireland" & euro$year == "1998"] <- 1
euro$foia[euro$country == "Latvia" & euro$year == "1998"] <- 1
euro$foia[euro$country == "Lithuania" & euro$year == "2000"] <- 1
euro$foia[euro$country == "Estonia" & euro$year == "2001"] <- 1
euro$foia[euro$country == "Romania" & euro$year == "2001"] <- 1
euro$foia[euro$country == "Slovakia" & euro$year == "2001"] <- 1
euro$foia[euro$country == "Poland" & euro$year == "2002"] <- 1
euro$foia[euro$country == "Croatia" & euro$year == "2003"] <- 1
euro$foia[euro$country == "Slovenia" & euro$year == "2003"] <- 1
euro$foia[euro$country == "United Kingdom" & euro$year == "2005"] <- 1
euro$foia[euro$country == "Germany" & euro$year == "2006"] <- 1
euro$aca_pres <- 0
as.num(euro$year)
as.numeric(euro$year)
euro$year <- as.numeric(euro$year)
euro$aca_pres[euro$country == "Austria" & euro$year == 2010] <- 1
euro$aca_pres[euro$country == "Belgium" & euro$year >= 2001] <- 1
View(euro)
euro$aca_pres <- 0
euro$year <- as.numeric(euro$year)
euro$aca_pres[euro$country == "Austria" & euro$year >= 2010] <- 1
euro$aca_pres[euro$country == "Belgium" & euro$year >= 2001] <- 1
euro$aca_pres[euro$country == "Bulgaria" & euro$year >= 2008] <- 1
euro$aca_pres[euro$country == "Spain" & euro$year >= 1995] <- 1
euro$aca_pres[euro$country == "Estonia" & euro$year >= 1999] <- 1
euro$aca_pres[euro$country == "France" & euro$year >= 1993] <- 1
euro$aca_pres[euro$country == "United Kingdom" & euro$year >= 1987] <- 1
euro$aca_pres[euro$country == "Hungary" & euro$year >= 1994] <- 1
euro$aca_pres[euro$country == "Italy" & euro$year >= 2008] <- 1
euro$aca_pres[euro$country == "Lithuania" & euro$year >= 2000] <- 1
euro$aca_pres[euro$country == "Latvia" & euro$year >= 2002] <- 1
euro$aca_pres[euro$country == "Malta" & euro$year >= 1988] <- 1
euro$aca_pres[euro$country == "Poland" & euro$year >= 2006] <- 1
euro$aca_pres[euro$country == "Portugal" & euro$year >= 2000] <- 1
euro$aca_pres[euro$country == "Romania" & euro$year >= 2002] <- 1
euro$aca_pres[euro$country == "Slovakia" & euro$year >= 2004] <- 1
euro$aca_pres[euro$country == "Slovenia" & euro$year >= 2004] <- 1
euro$aca_pres[euro$country == "Sweden" & euro$year >= 2003] <- 1
names(euro)
, type = "html")
```
euro[,c("cocscore", "foia","aca_pres")]
euro[,c("cocscore", "foia","aca_pres")]
euro[,c("cocscore", "foia","aca_pres")]
euro[,c(2,4:8,9:11)]
plot = ggplot(euro[euro$year>=2002,]) # generate ggplot with data = EU28 starting in 2002
plot = plot + geom_line(aes(x = year, y = cocscore, group = factor(country), # add layer to plot
color = factor(country))) # layer = line plot over year for cocscore
plot = plot + facet_wrap(~ country)
# group and color separate lines for each country
plot # prints the plot
library(ggplot)
plot = ggplot(euro[euro$year>=2002,]) # generate ggplot with data = EU28 starting in 2002
library(ggplot2)
plot = ggplot(euro[euro$year>=2002,]) # generate ggplot with data = EU28 starting in 2002
plot = plot + geom_line(aes(x = year, y = cocscore, group = factor(country), # add layer to plot
color = factor(country))) # layer = line plot over year for cocscore
plot = plot + facet_wrap(~ country)
# group and color separate lines for each country
plot # prints the plot
library(ggplot2)
plot = ggplot(euro[euro$year>=2002,]) # generate ggplot with data = EU28 starting in 2002
plot = plot + geom_line(aes(x = year, y = cocscore, group = factor(country), # add layer to plot
color = factor(country))) # layer = line plot over year for cocscore
plot = plot + facet_wrap(~ country)
plot = plot + theme(legend.position = "none")
# group and color separate lines for each country
plot # prints the plot
plot = ggplot(euro[euro$year>=2002,]) # generate ggplot with data = EU28 starting in 2002
plot = plot + geom_line(aes(x = year, y = cocscore, group = factor(country), # add layer to plot
color = 'black')) # layer = line plot over year for cocscore
plot = plot + facet_wrap(~ country)
plot = plot + theme(legend.position = "none")
# group and color separate lines for each country
plot # prints the plot
plot = ggplot(euro[euro$year>=2002,]) # generate ggplot with data = EU28 starting in 2002
plot = plot + geom_line(aes(x = year, y = cocscore, group = factor(country), # add layer to plot
color = 'black')) # layer = line plot over year for cocscore
plot = plot + facet_wrap(~ country)
plot = plot + theme(legend.position = "none")
plot = plot + theme_bw()
# group and color separate lines for each country
plot # prints the plot
plot = ggplot(euro[euro$year>=2002,]) # generate ggplot with data = EU28 starting in 2002
plot = plot + geom_line(aes(x = year, y = cocscore, group = factor(country) # add layer to plot
)) # layer = line plot over year for cocscore
plot = plot + facet_wrap(~ country)
plot = plot + theme(legend.position = "none")
plot = plot + theme_bw()
# group and color separate lines for each country
plot # prints the plot
plot = ggplot(euro[euro$year>=2002,]) # generate ggplot with data = EU28 starting in 2002
plot = plot + geom_line(aes(x = year, y = cocscore, group = factor(country) # add layer to plot
)) # layer = line plot over year for cocscore
plot = plot + facet_wrap(~ country) # gives each country its own frame
plot = plot + theme(legend.position = "none") # removes super bulky plot legend
plot = plot + theme_bw() # turns graph into black and white scheme
plot = plot + xlab("Year") + ylab("COC Score") # adds axis label
plot # prints the plot
stargazer(euro)
require(stargazer)
stargazer(euro)
euro["year" >=1998,]
euro["year" >=1998,]
plot = ggplot(euro[euro$year>=2002,]) # generate ggplot with data = EU28 starting in 2002
plot = plot + geom_line(aes(x = year, y = cocscore, group = factor(country) # add layer to plot
)) # layer = line plot over year for cocscore
plot = plot + facet_wrap(~ country) # gives each country its own frame
plot = plot + theme(legend.position = "none") # removes super bulky plot legend
plot = plot + theme_bw() # turns graph into black and white scheme
plot1 = plot + xlab("Year") + ylab("COC Score") # adds axis label
plot1 # prints the plot
stargazer(euro)
?stargazer
stargazer(euro, type = "html")
plot = ggplot(euro[euro$year>=2002,]) # generate ggplot with data = EU28 starting in 2002
plot = plot + geom_line(aes(x = year, y = cocscore, group = factor(country) # add layer to plot
)) # layer = line plot over year for cocscore
plot = plot + facet_wrap(~ country) # gives each country its own frame
plot = plot + theme(legend.position = "none") # removes super bulky plot legend
plot = plot + theme_bw() # turns graph into black and white scheme
plot1 = plot + xlab("Year") + ylab("COC Score") # adds axis label
plot1 # prints the plot
plot = ggplot(euro) # generate ggplot with data = EU28 starting in 2002
plot = plot + geom_line(aes(x = year, y = cocscore, group = factor(country) # add layer to plot
)) # layer = line plot over year for cocscore
plot = plot + facet_wrap(~ country) # gives each country its own frame
plot = plot + theme(legend.position = "none") # removes super bulky plot legend
plot = plot + theme_bw() # turns graph into black and white scheme
plot1 = plot + xlab("Year") + ylab("COC Score") # adds axis label
plot1 # prints the plot
xtable(euro)
require(xtable)
xtable(euro)
stargazer(euro, type = "html")
# descriptives for EU28 countries
require(stargazer)
stargazer(euro, type = "html")
xtable(euro)
# descriptives for EU28 countries
require(stargazer)
stargazer(euro, type = "html")
xtable(euro)
xtable(euro)
xtable("euro$cocscore")
xtable(euro$cocscore)
xtable("cocscore")
xtable(euro)
install.packages('plm')
e(pl)
require(plm)
summary(fixed.foia <- plm(cocscore ~ foia + gdppc + education + competitiveness + trade + urban,
data = euro, index = c('country','year'), model='within'))
summary(fixed.aca <- plm(cocscore ~ aca_pres + gdppc + education + competitiveness + trade + urban,
data = euro, index = c('country','year'), model='within'))
euro$foia <- 0
euro$year <- as.numeric(euro$year)
euro$foia[euro$country == "Ireland" & euro$year >= 1998] <- 1
euro$foia[euro$country == "Latvia" & euro$year >= 1998] <- 1
euro$foia[euro$country == "Lithuania" & euro$year >= 2000] <- 1
euro$foia[euro$country == "Estonia" & euro$year >= 2001] <- 1
euro$foia[euro$country == "Romania" & euro$year >= 2001] <- 1
euro$foia[euro$country == "Slovakia" & euro$year >= 2001] <- 1
euro$foia[euro$country == "Poland" & euro$year >= 2002] <- 1
euro$foia[euro$country == "Croatia" & euro$year >= 2003] <- 1
euro$foia[euro$country == "Slovenia" & euro$year >= 2003] <- 1
euro$foia[euro$country == "United Kingdom" & euro$year >= 2005] <- 1
euro$foia[euro$country == "Germany" & euro$year >= 2006] <- 1
summary(fixed.foia <- plm(cocscore ~ foia + gdppc + education + competitiveness + trade + urban,
data = euro, index = c('country','year'), model='within'))
stargazer(fixed.foia, fixed.apa)
stargazer(fixed.foia, fixed.aca)
require(plm)
summary(fixed.foia <- plm(cocscore ~ foia + gdppc + education + competitiveness + trade + urban,
data = euro, index = c('country','year'), model='within'))
summary(fixed.aca <- plm(cocscore ~ aca_pres + gdppc + education + competitiveness + trade + urban,
data = euro, index = c('country','year'), model='within'))
save.image("~/Desktop/MPP-4th Semester/MPP-E1180 Introduction to Collaborative Social Science Data Analysis/Assignments/Assignment3/workspace.RData")
require(plm)
summary(fixed.foia <- plm(cocscore ~ foia + gdppc + education + competitiveness + trade + urban,
data = euro, index = c('country','year'), model='within'))
summary(fixed.aca <- plm(cocscore ~ aca_pres + gdppc + education + competitiveness + trade + urban,
data = euro, index = c('country','year'), model='within'))
stargazer(fixed.foia, fixed.aca)
View(euro)
